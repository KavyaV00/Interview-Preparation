1. Longest increasing consecutive subsequence
    eg: [100,4,200,1,3,2] --> 4 (1,2,3,4)
    Approach: 
    Add these elements to a hash map. Look for start of a sequence. Check if (el-1) exists. If it doesn't, then that means it is the start of a sequence. Check if (el+1) exists. Continue checking, and increase count.
    Repeat this process. max_l=max(max_l,count)

2. Given a linked list, remove the nth node from the end of list and return its head.
    For example,
    Given linked list: 1->2->3->4->5, and n = 2.
    Approach:
    There are 2 approaches :
    1) Find out the length of the list in one go. Then you know the number of node to be removed. Traverse to the node and remove it.
    2) Make the first pointer go n nodes. Then move the second and first pointer simultaneously. This way, the first pointer is always ahead of the second pointer by n nodes. So when first pointer reaches the end, you are on the node to be removed.

3.  Maximum contiguous subarray sum in a cyclic array - Kadane
    Approach:
    Find the total sum.
    Invert the elements, apply kadane's algo. This max positive number would be the least number. Subtract it from the first value.

4.  Stock span - number of days before the current date the stock price was less than the current day price 
    Approach:
    stack<pair<int, int>> - 
    Push if the value is less than top. If greater, add the count of top to current(1) and pop top, till top is greater than current. Then push. 
    [100,80,60,70,60,75] - (100,1) (80,1) (60,1) --> (100,1) (80,1) (70,2) (60,1) --> (100,1) (80,1) (75,3)

5. Shortest common supersequence 
    Approach:
    len(x)+lex(y)-lcs(x,y)
